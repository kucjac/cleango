// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kucjac/cleango/xminio (interfaces: ObjectPutterGetter,Object)

// Package xminiomock is a generated GoMock package.
package xminiomock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	xminio "github.com/kucjac/cleango/xminio"
	minio "github.com/minio/minio-go/v7"
)

// MockObjectPutterGetter is a mock of ObjectPutterGetter interface.
type MockObjectPutterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockObjectPutterGetterMockRecorder
}

// MockObjectPutterGetterMockRecorder is the mock recorder for MockObjectPutterGetter.
type MockObjectPutterGetterMockRecorder struct {
	mock *MockObjectPutterGetter
}

// NewMockObjectPutterGetter creates a new mock instance.
func NewMockObjectPutterGetter(ctrl *gomock.Controller) *MockObjectPutterGetter {
	mock := &MockObjectPutterGetter{ctrl: ctrl}
	mock.recorder = &MockObjectPutterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectPutterGetter) EXPECT() *MockObjectPutterGetterMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockObjectPutterGetter) GetObject(arg0 context.Context, arg1, arg2 string, arg3 minio.GetObjectOptions) (xminio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(xminio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObjectPutterGetterMockRecorder) GetObject(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObjectPutterGetter)(nil).GetObject), arg0, arg1, arg2, arg3)
}

// PutObject mocks base method.
func (m *MockObjectPutterGetter) PutObject(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 int64, arg5 minio.PutObjectOptions) (minio.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(minio.UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockObjectPutterGetterMockRecorder) PutObject(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockObjectPutterGetter)(nil).PutObject), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockObject is a mock of Object interface.
type MockObject struct {
	ctrl     *gomock.Controller
	recorder *MockObjectMockRecorder
}

// MockObjectMockRecorder is the mock recorder for MockObject.
type MockObjectMockRecorder struct {
	mock *MockObject
}

// NewMockObject creates a new mock instance.
func NewMockObject(ctrl *gomock.Controller) *MockObject {
	mock := &MockObject{ctrl: ctrl}
	mock.recorder = &MockObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObject) EXPECT() *MockObjectMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockObject) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockObjectMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockObject)(nil).Close))
}

// Read mocks base method.
func (m *MockObject) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockObjectMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockObject)(nil).Read), arg0)
}

// ReadAt mocks base method.
func (m *MockObject) ReadAt(arg0 []byte, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockObjectMockRecorder) ReadAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockObject)(nil).ReadAt), arg0, arg1)
}

// Seek mocks base method.
func (m *MockObject) Seek(arg0 int64, arg1 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockObjectMockRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockObject)(nil).Seek), arg0, arg1)
}

// Stat mocks base method.
func (m *MockObject) Stat() (minio.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(minio.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockObjectMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockObject)(nil).Stat))
}
