{
  "Clean Go Command": {
    "prefix": "cgCommand",
    "body": [
      "",
      "//",
      "// ${1:COMMAND}${2:MODEL} ${3:VERSION} Command",
      "//",
      "",
      "// New${1:COMMAND}${2:MODEL}Request${3:VERSION} is a constructor for the $4 event.",
      "func New$4() ($5, error) {",
      "    req := $6{}",
      "    if err := req.Validate(); err != nil {",
      "        return nil, err",
      "    }",
      "    return req, nil",
      "}",
      "",
      "// MessageType gets the type of the event.",
      "// Implements messages.Message interface.",
      "func (${7:RECEIVER} $5) MessageType() string {",
      "    return \"$8:$9\"",
      "}",
      "",
      "// Validate implements validator.Validator interface.",
      "func (${7:RECEIVER} $10) Validate() error{",
      "    err := validation.ValidateStruct(${7:RECEIVER}, ",
      "        // validation.Field(\u0026${7:RECEIVER}.${11:FIELD}, validation.Required),",
      "    )",
      "    if err == nil {",
      "        return nil        ",
      "    }    ",
      "    var ve validation.Errors",
      "\tif !errors.As(err, \u0026ve) {",
      "        return cgerrors.ErrInvalidArgumentf(\"invalid input: %v\", err).WithProcess(${7:RECEIVER}.MessageType())",
      "    }",
      "    er := cgerrors.ErrInvalidArgument(\"invalid input\")",
      "    for k, v := range ve {",
      "        er.Meta[k] = v.Error()",
      "    }",
      "    return er",
      "}"
    ],
    "description": "Clean Go Command"
  },
  "Clean Go Event": {
    "prefix": "cgEvent",
    "body": [
      "//",
      "// ${1:MODEL}${2:EVENT} Event",
      "//",
      "",
      "",
      "// $3$4 is a constructor for the $4 event.",
      "func $3$4() ($5, error) {",
      "    msg := $6{}",
      "    if err := msg.Validate(); err != nil {",
      "        return nil, err",
      "    }",
      "    return msg, nil",
      "}",
      "",
      "$7",
      "",
      "",
      "// ${8:EVENT_MESSAGE_TYPE} is the type used by the ${1:MODEL} aggregate on the ${2:EVENT} event.",
      "const ${8:EVENT_MESSAGE_TYPE} = \"${9:AGGREGATE}:${10:EVENT_SNAKE}\"",
      "",
      "// MessageType gets the type of the event.",
      "// Implements messages.Message interface.",
      "func (${11:RECEIVER} $5) MessageType() string {",
      "    return ${8:EVENT_MESSAGE_TYPE}",
      "}",
      "",
      "// ${12:EVENT_MODEL_TOPIC} is the topic used by the ${1:MODEL} aggregate on the ${2:EVENT} event.",
      "const ${12:EVENT_MODEL_TOPIC} = \"${13:DOMAIN}.${9:AGGREGATE}.${10:EVENT_SNAKE}\"",
      "",
      "// MessageTopic returns messages.Topic from given message.",
      "// Implements messages.Message interface.",
      "func (${11:RECEIVER} $5) MessageTopic() string {",
      "    return ${12:EVENT_MODEL_TOPIC}",
      "}",
      "",
      "// Validate implements validator.Validator interface.",
      "func (${11:RECEIVER} $5) Validate() error {    ",
      "    err := validation.ValidateStruct(${11:RECEIVER}, ",
      "        validation.Field(\u0026${11:RECEIVER}.FieldName, validation.Required),",
      "    )",
      "    if err == nil {",
      "        return nil        ",
      "    }    ",
      "    var ve validation.Errors",
      "\tif !errors.As(err, \u0026ve) {",
      "        return cgerrors.ErrInvalidArgumentf(\"invalid input: %v\",err).WithProcess(${11:RECEIVER}.MessageType())",
      "    }",
      "    er := cgerrors.ErrInvalidArgument(\"invalid input\").WithProcess(${11:RECEIVER}.MessageType())",
      "    for k, v := range ve {",
      "        er.Meta[k] = v.Error()",
      "    }",
      "    return er    ",
      "}",
      "",
      ""
    ],
    "description": "Clean Go Event"
  },
  "Clean Go Event Type": {
    "prefix": "cgEventType",
    "body": [
      "//",
      "// ${1:MODEL}${2:EVENT} Event",
      "//",
      "",
      "",
      "// MessageType gets the type of the event.",
      "// Implements messages.Message interface.",
      "func (${3:RECEIVER} $4) MessageType() string {",
      "    return domain.${1:MODEL}${2:EVENT}Type",
      "}",
      ""
    ],
    "description": "Clean Go Event Type"
  },
  "Clean Go Query": {
    "prefix": "cgQuery",
    "body": [
      "//",
      "// ${1:QUERY}${2:MODEL} ${3:VERSION} Query",
      "//",
      "",
      "// New${1:QUERY}${2:MODEL}Request${3:VERSION} is a constructor for the $4 event.",
      "func New$4() $5 {",
      "    return $6{}",
      "}",
      "",
      "// MessageType gets the type of the event.",
      "// Implements messages.Message interface.",
      "func (${7:RECEIVER} $5) MessageType() string {",
      "    return \"${8:AGGREGATE}:$9\"",
      "}",
      "",
      "",
      "// Validate implements validator.Validator interface.",
      "func (${7:RECEIVER} $5) Validate() error {    ",
      "    err := validation.ValidateStruct(${7:RECEIVER}, ",
      "        validation.Field(\u0026${7:RECEIVER}.FieldName, validation.Required),",
      "    )",
      "    if err == nil {",
      "        return nil        ",
      "    }    ",
      "    ve, ok  := err.(validation.Errors)",
      "    if !ok {",
      "        return cgerrors.ErrInvalidArgumentf(\"invalid input: %v\",err).",
      "           WithProcess(${7:RECEIVER}.MessageType())",
      "    }",
      "    er := cgerrors.ErrInvalidArgument(\"invalid input\").",
      "        WithProcess(${7:RECEIVER}.MessageType())",
      "    for k, v := range ve {",
      "        er.Meta[k] = v.Error()",
      "    }",
      "    return er    ",
      "}"
    ],
    "description": "Clean Go Query"
  },
  "CleanGo - Creates a validation method for given type.": {
    "prefix": "cgValidate",
    "body": [
      "// Validate the $1 fields and parameters.",
      "func (x *$1) Validate() error {",
      "    err := validation.ValidateStruct(x,",
      "\t\t// Validate specific fields. ",
      "\t\t// validation.Field(\u0026x.Key, validation.Required, validation.Length(10, 120)),",
      "\t)",
      "\tif err == nil {",
      "\t\treturn nil",
      "\t}",
      "\tve, ok := err.(validation.Errors)",
      "\tif !ok {",
      "\t\treturn cgerrors.ErrInvalidArgumentf(\"invalid input: %v\", err)",
      "\t}",
      "\ter := cgerrors.ErrInvalidArgument(\"invalid input\")",
      "\tfor k, v := range ve {",
      "\t\ter.Meta[k] = v.Error()",
      "\t}",
      "\treturn er",
      "}"
    ],
    "description": "CleanGo - Creates a validation method for given type."
  },
  "Protobuf functions for the event function.": {
    "prefix": "cgEventProto",
    "body": [
      "// MarshalProto implements codec.ProtoMarshaler interface.",
      "func (${1:RECEIVER} $2) MarshalProto() ([]byte, error) {",
      "    msg := ${3:PROTO_PKG}.${4:MESSAGE_BASE}{/** Field: ${1:RECEIVER}.Field */}",
      "    ",
      "    data, err := proto.Marshal(\u0026msg)",
      "    if err != nil {",
      "        return nil, cgerrors.ErrInternal(\"marshaling event message failed\").WithMeta(\"err\", err.Error())",
      "    }",
      "    return data, nil",
      "} ",
      "",
      "// UnmarshalProto implements codec.ProtoUnmarshaler interface.",
      "func (${1:RECEIVER} $2) UnmarshalProto(in []byte) error {",
      "    msg := ${3:PROTO_PKG}.${4:MESSAGE_BASE}{}",
      "    if err := proto.Unmarshal(in, \u0026msg); err != nil {",
      "        return cgerrors.ErrInternal(\"unmarshalling protobuf message failed\").WithMeta(\"err\", err.Error())",
      "    }",
      "    // ${1:RECEIVER}.Field = msg.Field",
      "    return nil",
      "}"
    ],
    "description": "Protobuf functions for the event function."
  }
}
