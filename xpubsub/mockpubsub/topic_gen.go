// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kucjac/cleango/xpubsub (interfaces: Topic)

// Package mockpubsub is a generated GoMock package.
package mockpubsub

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pubsub "gocloud.dev/pubsub"
)

// MockTopic is a mock of Topic interface.
type MockTopic struct {
	ctrl     *gomock.Controller
	recorder *MockTopicMockRecorder
}

// MockTopicMockRecorder is the mock recorder for MockTopic.
type MockTopicMockRecorder struct {
	mock *MockTopic
}

// NewMockTopic creates a new mock instance.
func NewMockTopic(ctrl *gomock.Controller) *MockTopic {
	mock := &MockTopic{ctrl: ctrl}
	mock.recorder = &MockTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopic) EXPECT() *MockTopicMockRecorder {
	return m.recorder
}

// As mocks base method.
func (m *MockTopic) As(arg0 interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "As", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// As indicates an expected call of As.
func (mr *MockTopicMockRecorder) As(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "As", reflect.TypeOf((*MockTopic)(nil).As), arg0)
}

// ErrorAs mocks base method.
func (m *MockTopic) ErrorAs(arg0 error, arg1 interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorAs", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ErrorAs indicates an expected call of ErrorAs.
func (mr *MockTopicMockRecorder) ErrorAs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorAs", reflect.TypeOf((*MockTopic)(nil).ErrorAs), arg0, arg1)
}

// Send mocks base method.
func (m *MockTopic) Send(arg0 context.Context, arg1 *pubsub.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTopicMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTopic)(nil).Send), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockTopic) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockTopicMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockTopic)(nil).Shutdown), arg0)
}
