// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kucjac/cleango/database/es (interfaces: Cursor)

// Package mockes is a generated GoMock package.
package mockes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	es "github.com/kucjac/cleango/database/es"
)

// MockCursor is a mock of Cursor interface.
type MockCursor struct {
	ctrl     *gomock.Controller
	recorder *MockCursorMockRecorder
}

// MockCursorMockRecorder is the mock recorder for MockCursor.
type MockCursorMockRecorder struct {
	mock *MockCursor
}

// NewMockCursor creates a new mock instance.
func NewMockCursor(ctrl *gomock.Controller) *MockCursor {
	mock := &MockCursor{ctrl: ctrl}
	mock.recorder = &MockCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCursor) EXPECT() *MockCursorMockRecorder {
	return m.recorder
}

// GetAggregateStream mocks base method.
func (m *MockCursor) GetAggregateStream(arg0 bool) (<-chan *es.CursorAggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregateStream", arg0)
	ret0, _ := ret[0].(<-chan *es.CursorAggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregateStream indicates an expected call of GetAggregateStream.
func (mr *MockCursorMockRecorder) GetAggregateStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateStream", reflect.TypeOf((*MockCursor)(nil).GetAggregateStream), arg0)
}
