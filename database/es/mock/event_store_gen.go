// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kucjac/cleango/database/es (interfaces: EventStore)

// Package mockes is a generated GoMock package.
package mockes

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	es "github.com/kucjac/cleango/database/es"
)

// MockEventStore is a mock of EventStore interface.
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore.
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance.
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockEventStore) Commit(arg0 context.Context, arg1 es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockEventStoreMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockEventStore)(nil).Commit), arg0, arg1)
}

// LoadEvents mocks base method.
func (m *MockEventStore) LoadEvents(arg0 context.Context, arg1 es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadEvents indicates an expected call of LoadEvents.
func (mr *MockEventStoreMockRecorder) LoadEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEvents", reflect.TypeOf((*MockEventStore)(nil).LoadEvents), arg0, arg1)
}

// LoadEventsWithSnapshot mocks base method.
func (m *MockEventStore) LoadEventsWithSnapshot(arg0 context.Context, arg1 es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEventsWithSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadEventsWithSnapshot indicates an expected call of LoadEventsWithSnapshot.
func (mr *MockEventStoreMockRecorder) LoadEventsWithSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEventsWithSnapshot", reflect.TypeOf((*MockEventStore)(nil).LoadEventsWithSnapshot), arg0, arg1)
}

// SaveSnapshot mocks base method.
func (m *MockEventStore) SaveSnapshot(arg0 context.Context, arg1 es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSnapshot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSnapshot indicates an expected call of SaveSnapshot.
func (mr *MockEventStoreMockRecorder) SaveSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSnapshot", reflect.TypeOf((*MockEventStore)(nil).SaveSnapshot), arg0, arg1)
}

// SetAggregateBase mocks base method.
func (m *MockEventStore) SetAggregateBase(arg0 es.Aggregate, arg1, arg2 string, arg3 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAggregateBase", arg0, arg1, arg2, arg3)
}

// SetAggregateBase indicates an expected call of SetAggregateBase.
func (mr *MockEventStoreMockRecorder) SetAggregateBase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAggregateBase", reflect.TypeOf((*MockEventStore)(nil).SetAggregateBase), arg0, arg1, arg2, arg3)
}

// StreamEvents mocks base method.
func (m *MockEventStore) StreamEvents(arg0 context.Context, arg1 *es.StreamEventsRequest) (<-chan *es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamEvents", arg0, arg1)
	ret0, _ := ret[0].(<-chan *es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamEvents indicates an expected call of StreamEvents.
func (mr *MockEventStoreMockRecorder) StreamEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEvents", reflect.TypeOf((*MockEventStore)(nil).StreamEvents), arg0, arg1)
}
