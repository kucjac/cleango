package cgerrors

import (
	"errors"

	"gocloud.dev/gcerrors"
	"google.golang.org/grpc/codes"
)

//go:generate stringer -output codes_string.go -trimprefix ErrorCode_ -type ErrorCode

// ErrorCode is a code that defines errors specification.
type ErrorCode int32

// ErrorCode well known codes.
// nolint: revive,stylecheck
const (
	// Deprecated: use CodeOK instead.
	ErrorCode_OK ErrorCode = 0
	// Deprecated: use CodeCanceled instead.
	ErrorCode_Canceled ErrorCode = 1
	// Deprecated: use CodeUnknown instead.
	ErrorCode_Unknown ErrorCode = 2
	// Deprecated: use CodeInvalidArgument instead.
	ErrorCode_InvalidArgument ErrorCode = 3
	// Deprecated: use CodeDeadlineExceeded instead.
	ErrorCode_DeadlineExceeded ErrorCode = 4
	// Deprecated: use CodeNotFound instead.
	ErrorCode_NotFound ErrorCode = 5
	// Deprecated: use CodeAlreadyExists instead.
	ErrorCode_AlreadyExists ErrorCode = 6
	// Deprecated: use CodePermissionDenied instead.
	ErrorCode_PermissionDenied ErrorCode = 7
	// Deprecated: use CodeResourceExhausted instead.
	ErrorCode_ResourceExhausted ErrorCode = 8
	// Deprecated: use CodeFailedPrecondition instead.
	ErrorCode_FailedPrecondition ErrorCode = 9
	// Deprecated: use CodeAborted instead.
	ErrorCode_Aborted ErrorCode = 10
	// Deprecated: use CodeOutOfRange instead.
	ErrorCode_OutOfRange ErrorCode = 11
	// Deprecated: use CodeUnimplemented instead.
	ErrorCode_Unimplemented ErrorCode = 12
	// Deprecated: use CodeInternal instead.
	ErrorCode_Internal ErrorCode = 13
	// Deprecated: use CodeUnavailable instead.
	ErrorCode_Unavailable ErrorCode = 14
	// Deprecated: use CodeDataLoss instead.
	ErrorCode_DataLoss ErrorCode = 15
	// Deprecated: use CodeUnauthenticated instead.
	ErrorCode_Unauthenticated ErrorCode = 16
)

// ErrorCode new names
const (
	// CodeOK should be used as the codes.OK. Returned on success.
	CodeOK = ErrorCode_OK

	// CodeCanceled indicates the operation was canceled (typically by the caller).
	CodeCanceled = ErrorCode_Canceled

	// CodeUnknown error. An example of where this error may be returned is
	// if an error value received from another address space belongs to
	// an error-space that is not known in this address space. Also, errors
	// raised by APIs that do not return enough error information
	// may be converted to this error.
	CodeUnknown = ErrorCode_Unknown

	// CodeInvalidArgument indicates client specified an invalid argument.
	// Note that this differs from FailedPrecondition. It indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name, or validation errors).
	CodeInvalidArgument = ErrorCode_InvalidArgument

	// CodeDeadlineExceeded means operation expired before completion.
	// For operations that change the state of the system, this error may be
	// returned even if the operation has completed successfully. For
	// example, a successful response from a server could have been delayed
	// long enough for the deadline to expire.
	CodeDeadlineExceeded = ErrorCode_DeadlineExceeded

	// CodeNotFound means some requested entity or model (e.g., file or directory) was
	// not found.
	CodeNotFound = ErrorCode_NotFound

	// CodeAlreadyExists means an attempt to create an entity failed because one
	// already exists.
	CodeAlreadyExists = ErrorCode_AlreadyExists

	// CodePermissionDenied indicates the caller does not have permission to
	// execute the specified operation. It must not be used for rejections
	// caused by exhausting some resource (use ResourceExhausted
	// instead for those errors). It must not be
	// used if the caller cannot be identified (use Unauthenticated
	// instead for those errors).
	CodePermissionDenied = ErrorCode_PermissionDenied

	// CodeResourceExhausted indicates some resource has been exhausted, perhaps
	// a per-user quota, or perhaps the entire file system is out of space.
	//
	// This error code will be generated by the gRPC framework in
	// out-of-memory and server overload situations, or when a message is
	// larger than the configured maximum size.
	CodeResourceExhausted = ErrorCode_ResourceExhausted

	// CodeFailedPrecondition indicates operation was rejected because the
	// system is not in a state required for the operation's execution.
	// For example, directory to be deleted may be non-empty, a rmdir
	// operation is applied to a non-directory, etc.
	//
	// A litmus test that may help a service implementor in deciding
	// between CodeFailedPrecondition, CodeAborted, and CodeUnavailable:
	//  (a) Use CodeUnavailable if the client can retry just the failing call.
	//  (b) Use CodeAborted if the client should retry at a higher-level
	//      (e.g., restarting a read-modify-write sequence).
	//  (c) Use CodeFailedPrecondition if the client should not retry until
	//      the system state has been explicitly fixed. E.g., if a "rmdir"
	//      fails because the directory is non-empty, FailedPrecondition
	//      should be returned since the client should not retry unless
	//      they have first fixed up the directory by deleting files from it.
	//  (d) Use CodeFailedPrecondition if the client performs conditional
	//      REST Get/Update/Delete on a resource and the resource on the
	//      server does not match the condition. E.g., conflicting
	//      read-modify-write on the same resource.
	CodeFailedPrecondition = ErrorCode_FailedPrecondition

	// CodeAborted indicates the operation was aborted, typically due to a
	// concurrency issue like sequencer check failures, transaction aborts,
	// etc.
	//
	// See litmus test above for deciding between CodeFailedPrecondition,
	// CodeAborted, and CodeUnavailable.
	CodeAborted = ErrorCode_Aborted

	// CodeOutOfRange means operation was attempted past the valid range.
	// E.g., seeking or reading past end of file.
	//
	// Unlike CodeInvalidArgument, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate CodeInvalidArgument if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// CodeOutOfRange if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between CodeFailedPrecondition and
	// CodeOutOfRange. We recommend using CodeOutOfRange (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an CodeOutOfRange error to detect when
	// they are done.
	CodeOutOfRange = ErrorCode_OutOfRange

	// CodeUnimplemented indicates operation is not implemented or not
	// supported/enabled in this service.
	CodeUnimplemented = ErrorCode_Unimplemented

	// CodeInternal errors. Means some invariants expected by underlying
	// system has been broken. If you see one of these errors,
	// something is very broken.
	CodeInternal = ErrorCode_Internal

	// CodeUnavailable indicates the service is currently unavailable.
	// This is a most likely a transient condition and may be corrected
	// by retrying with a backoff. Note that it is not always safe to retry
	// non-idempotent operations.
	//
	// See litmus test above for deciding between CodeFailedPrecondition,
	// CodeAborted, and CodeUnavailable.
	CodeUnavailable = ErrorCode_Unavailable

	// CodeDataLoss indicates unrecoverable data loss or corruption.
	CodeDataLoss = ErrorCode_DataLoss

	// CodeUnauthenticated indicates the request does not have valid
	// authentication credentials for the operation.
	CodeUnauthenticated = ErrorCode_Unauthenticated
)

// ErrorCoder is an interface used to obtain an error code from given error within given implementation.
type ErrorCoder interface {
	ErrorCode(err error) ErrorCode
}

// Code gets the code defined in given
func Code(err error) ErrorCode {
	var e *Error
	if errors.As(err, &e) {
		return e.Code
	}
	//nolint: errorlint
	if ec, ok := err.(ErrorCoder); ok {
		return ec.ErrorCode(err)
	}
	return fromGCErrors(gcerrors.Code(err))
}

// ToGRPCCode gets the related grpc code.
func (c ErrorCode) ToGRPCCode() codes.Code {
	switch c {
	case CodeOK:
		return codes.OK
	case CodeCanceled:
		return codes.Canceled
	case CodeUnknown:
		return codes.Unknown
	case CodeInvalidArgument:
		return codes.InvalidArgument
	case CodeDeadlineExceeded:
		return codes.DeadlineExceeded
	case CodeNotFound:
		return codes.NotFound
	case CodeAlreadyExists:
		return codes.AlreadyExists
	case CodePermissionDenied:
		return codes.PermissionDenied
	case CodeResourceExhausted:
		return codes.ResourceExhausted
	case CodeFailedPrecondition:
		return codes.FailedPrecondition
	case CodeAborted:
		return codes.Aborted
	case CodeOutOfRange:
		return codes.OutOfRange
	case CodeUnimplemented:
		return codes.Unimplemented
	case CodeInternal:
		return codes.Internal
	case CodeUnavailable:
		return codes.Unavailable
	case CodeDataLoss:
		return codes.DataLoss
	case CodeUnauthenticated:
		return codes.Unauthenticated
	default:
		return codes.Unknown
	}
}

func fromGCErrors(code gcerrors.ErrorCode) ErrorCode {
	switch code {
	case gcerrors.OK:
		return CodeOK
	case gcerrors.Unknown:
		return CodeUnknown
	case gcerrors.NotFound:
		return CodeNotFound
	case gcerrors.AlreadyExists:
		return CodeAlreadyExists
	case gcerrors.InvalidArgument:
		return CodeInvalidArgument
	case gcerrors.Internal:
		return CodeInternal
	case gcerrors.Unimplemented:
		return CodeUnimplemented
	case gcerrors.FailedPrecondition:
		return CodeFailedPrecondition
	case gcerrors.PermissionDenied:
		return CodePermissionDenied
	case gcerrors.ResourceExhausted:
		return CodeResourceExhausted
	case gcerrors.Canceled:
		return CodeCanceled
	case gcerrors.DeadlineExceeded:
		return CodeDeadlineExceeded
	}
	return CodeUnknown
}
