{
  "Clean Go Command": {
    "prefix": "cgCommand",
    "body": [
      "",
      "//",
      "// ${1:another}${2:another} ${3:another} Command",
      "//",
      "",
      "// New${1:another}${2:another}Request${3:another} is a constructor for the $4 event.",
      "func New$4() $5 {",
      "    return $6{}",
      "}",
      "",
      "// MessageType defines command message type.",
      "func (${7:another} $8) MessageType() string {",
      "    return \"$9:$10\"",
      "}",
      "",
      "// Validate implements validator.Validator interface.",
      "func (${7:another} $8) Validate() error{",
      "    err := validation.ValidateStruct(${7:another}, ",
      "        // validation.Field(\u0026${7:another}.${11:another}, validation.Required),",
      "    )",
      "    if err == nil {",
      "        return nil        ",
      "    }    ",
      "    ve, ok  := err.(validation.Errors)",
      "    if !ok {",
      "        return cgerrors.ErrInvalidArgumentf(\"invalid input: %v\", err).WithProcess(${7:another}.MessageType())",
      "    }",
      "    er := cgerrors.ErrInvalidArgument(\"invalid input\")",
      "    for k, v := range ve {",
      "        er.Meta[k] = v.Error()",
      "    }",
      "    return er",
      "}"
    ],
    "description": "Clean Go Command"
  },
  "Clean Go Event": {
    "prefix": "cgEvent",
    "body": [
      "//",
      "// ${1:another}${2:another} Event",
      "//",
      "",
      "",
      "// New$3 is a constructor for the $3 event.",
      "func New$3() $4 {",
      "    return $5{}",
      "}",
      "",
      "$6",
      "",
      "",
      "// ${7:another} is the type used by the ${1:another} aggregate on the ${2:another} event.",
      "const ${7:another} = \"${8:another}:${9:another}\"",
      "",
      "// MessageType gets the type of the event.",
      "// Implements messages.Message interface.",
      "func (${10:another} $4) MessageType() string {",
      "    return ${7:another}",
      "}",
      "",
      "// ${11:another} is the topic used by the ${1:another} aggregate on the ${2:another} event.",
      "const ${11:another} = \"${12:another}.${8:another}.${9:another}\"",
      "",
      "// MessageTopic returns messages.Topic from given message.",
      "// Implements messages.Message interface.",
      "func (${10:another} $4) MessageTopic() string {",
      "    return ${11:another}",
      "}",
      "",
      "// Validate implements validator.Validator interface.",
      "func (${10:another} $4) Validate() error {    ",
      "    err := validation.ValidateStruct(${10:another}, ",
      "        validation.Field(\u0026${10:another}.FieldName, validation.Required),",
      "    )",
      "    if err == nil {",
      "        return nil        ",
      "    }    ",
      "    ve, ok  := err.(validation.Errors)",
      "    if !ok {",
      "        return cgerrors.ErrInvalidArgumentf(\"invalid input: %v\",err).WithProcess(${10:another}.MessageType())",
      "    }",
      "    er := cgerrors.ErrInvalidArgument(\"invalid input\").WithProcess(${10:another}.MessageType())",
      "    for k, v := range ve {",
      "        er.Meta[k] = v.Error()",
      "    }",
      "    return er    ",
      "}"
    ],
    "description": "Clean Go Event"
  },
  "Clean Go Query": {
    "prefix": "cgQuery",
    "body": [
      "//",
      "// ${1:another}${2:another} ${3:another} Query",
      "//",
      "",
      "// New${1:another}${2:another}Request${3:another} is a constructor for the $4 event.",
      "func New$4() $5 {",
      "    return $6{}",
      "}",
      "",
      "// MessageType gets the type of the event.",
      "// Implements messages.Message interface.",
      "func (${7:another} $5) MessageType() string {",
      "    return \"${8:another}:${9:another}:$10\"",
      "}",
      "",
      "",
      "// Validate implements validator.Validator interface.",
      "func (${7:another} $5) Validate() error {    ",
      "    err := validation.ValidateStruct(${7:another}, ",
      "        validation.Field(\u0026${7:another}.FieldName, validation.Required),",
      "    )",
      "    if err == nil {",
      "        return nil        ",
      "    }    ",
      "    ve, ok  := err.(validation.Errors)",
      "    if !ok {",
      "        return cgerrors.ErrInvalidArgumentf(\"invalid input: %v\",err).",
      "           WithProcess(${7:another}.MessageType())",
      "    }",
      "    er := cgerrors.ErrInvalidArgument(\"invalid input\").",
      "        WithProcess(${7:another}.MessageType())",
      "    for k, v := range ve {",
      "        er.Meta[k] = v.Error()",
      "    }",
      "    return er    ",
      "}"
    ],
    "description": "Clean Go Query"
  },
  "CleanGo - Creates a validation method for given type.": {
    "prefix": "cgValidate",
    "body": [
      "// Validate the $1 fields and parameters.",
      "func (x *$1) Validate() error {",
      "    err := validation.ValidateStruct(x,",
      "\t\t// Validate specific fields. ",
      "\t\t// validation.Field(\u0026x.Key, validation.Required, validation.Length(10, 120)),",
      "\t)",
      "\tif err == nil {",
      "\t\treturn nil",
      "\t}",
      "\tve, ok := err.(validation.Errors)",
      "\tif !ok {",
      "\t\treturn cgerrors.ErrInvalidArgumentf(\"invalid input: %v\", err)",
      "\t}",
      "\ter := cgerrors.ErrInvalidArgument(\"invalid input\")",
      "\tfor k, v := range ve {",
      "\t\ter.Meta[k] = v.Error()",
      "\t}",
      "\treturn er",
      "}"
    ],
    "description": "CleanGo - Creates a validation method for given type."
  }
}